@page "/orderpage/create"
@page "/orderpage/create/{id:int}"

@inject IOrderClientService OrderClientService
@inject NavigationManager NavigationManager


<h3>Create Order</h3>

@if (errorMessage != null)
{
    <p>@errorMessage</p>
}

<EditForm Model="@order" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name:</label>
        <InputText  class="form-control" @bind-Value="order.Name" />
        <ValidationMessage For="@(() => order.Name)" />
    </div>

    <div class="form-group">
        <label for="state">State:</label>
        <InputText class="form-control" @bind-Value="order.State" />
        <ValidationMessage For="@(() => order.State)" />
    </div>

    <h4>Windows:</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Quantity</th>
                <th>Sub-elements</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var window in order.Windows)
            {
                <tr>
                    <td><InputText @bind-Value="window.Name" /></td>
                    <td><InputNumber @bind-Value="window.QuantityOfWindows" /></td>
                    <td>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Element</th>
                                    <th>Type</th>
                                    <th>Width</th>
                                    <th>Height</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var subElement in window.SubElements)
                                {
                                    <tr>
                                        <td>
                                            <InputText @bind-Value="subElement.Element" />
                                         </td>
                                        <td><InputText @bind-Value="subElement.Type" /></td>
                                        <td><InputNumber @bind-Value="subElement.Width" /></td>
                                        <td><InputNumber @bind-Value="subElement.Height" /></td>
                                        <td><button type="button" class="btn btn-sm btn-primary" @onclick="() => RemoveSubElement(subElement)"><i class="fa fa-remove" style="color:red"></i></button></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <button type="button" class="btn btn-primary" @onclick="() => AddSubElement(window)">Add Sub-element</button>
                    </td>
                    <td><button type="button" class="btn btn-danger" @onclick="() => RemoveWindow(window)">Remove Window</button></td>
                </tr>
            }
        </tbody>
    </table>
    <button type="button" class="btn btn-primary" @onclick="AddWindow">Add Window</button>

    <button type="submit" class="btn btn-sm btn-primary">Create</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    private Order order = new Order();
    private string errorMessage;

    private void HandleValidSubmit()
    {
        if (Id == null)
        {
            OrderClientService.CreateOrder(order);
        }
        else
        {
            OrderClientService.UpdateOrder(order);
        }
    }

  

    private void AddWindow()
    {
        order.Windows.Add(new Window { SubElements = new List<SubElement>() });
    }

    private void RemoveWindow(Window window)
    {
        order.Windows.Remove(window);
    }

    private void AddSubElement(Window window)
    {
        window.SubElements.Add(new SubElement());
    }

    private void RemoveSubElement(SubElement subElement)
    {
        order.Windows.ElementAt(0).SubElements.Remove(subElement);
    }

   
}
