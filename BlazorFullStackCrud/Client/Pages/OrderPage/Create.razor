@page "/ordercreate"
@page "/ordercreate/{id:int}"
@using BlazorFullStackCrud.Shared.Common;
@using BlazorFullStackCrud.Shared.DTO;

@inject IOrderClientService OrderClientService
@inject NavigationManager NavigationManager
@inject ToastService toastService

<h5>Create Order</h5>

@if (IsLoading)
{
    <div class="spinner"></div>
}
else
{
    <EditForm Model="@order" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @if (showConfirmationDialog)
        {
            <div class="alert alert-warning alert-dismissible fade show" role="alert">
                <strong>Are you sure you want to remove this?</strong>
                <hr>
                <button type="button" class="btn btn-danger" @onclick="() => ConfirmDelete(dataEnumType)">Yes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="alert" aria-label="Cancel" @onclick="CancelDelete">Cancel</button>
            </div>
        }

        <div class="container">
            <div class="col-md-12">
                <div class="form-group">
                    <label for="name">Name:</label>
                    <InputText class="form-control " @bind-Value="order.Name" />
                    <ValidationMessage For="@(() => order.Name)" />
                </div>

                <div class="form-group">
                    <label for="state">State:</label>
                    <InputText class="form-control" @bind-Value="order.State" />
                    <ValidationMessage For="@(() => order.State)" />
                </div>
            </div>

            <div class="col-md-12">
                <h5>Windows:</h5>
                <table class="table table-responsive-sm">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Quantity</th>
                            <th>Sub-elements</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var window in order.Windows)
                        {
                            <tr>
                                <td>
                                    <div class="col-xs-1">
                                        <InputText @bind-Value="window.Name" />
                                    </div>
                                </td>
                                <td><InputNumber @bind-Value="window.QuantityOfWindows" /></td>
                                <td rowspan="3">
                                    <table class="table table-responsive">
                                        <thead>
                                            <tr>
                                                <th>Element</th>
                                                <th>Type</th>
                                                <th>Width</th>
                                                <th>Height</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var subElement in window.SubElements)
                                            {
                                                <tr>
                                                    <td>
                                                        <InputText @bind-Value="subElement.Element" />
                                                    </td>
                                                    <td><InputText @bind-Value="subElement.Type" /></td>
                                                    <td><InputNumber @bind-Value="subElement.Width" /></td>
                                                    <td><InputNumber @bind-Value="subElement.Height" /></td>
                                                    <td><button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveSubElement(window.Id,subElement)"><i class="fa fa-remove"></i></button></td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                    <button type="button" class="btn btn-sm btn-primary" @onclick="() => AddSubElement(window)">Add Sub-element</button>
                                </td>
                                <td><button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveWindow(window)"><i class="fa fa-remove"></i></button></td>
                            </tr>
                        }
                    </tbody>
                </table>
                <button type="button" class="btn btn-sm btn-primary" @onclick="AddWindow">Add Window</button>
            </div>
            <br /><br />
            <button type="submit" class="btn btn-sm btn-primary me-1">@btnText</button>
            @if(Id !=null){
                <button class="btn btn-sm btn-danger me-1" @onclick="() => ConfirmDelete(DataEnumType.Order)">Delete</button>
            }
            <button class="btn btn-sm btn-info" @onclick="() => Close()">Close</button>

        </div>

    </EditForm>

}


@code {

    [Parameter]
    public int? Id { get; set; }
    public int? SubElementWindowId { get; set; }
    bool IsLoading = true;
    private OrderDTO order = new OrderDTO();

    string btnText = string.Empty;
    bool showConfirmationDialog = false;
    private DataEnumType dataEnumType;


    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save Order" : "Update Order";
    }


    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            order = await OrderClientService.GetSingleOrders((int)Id);
        }
        IsLoading = false;
    }

    private async void HandleValidSubmit()
    {
        IsLoading = true;
        if (Id == null)
        {
            try
            {
                await OrderClientService.CreateOrder(order);
                toastService.ShowToast("Order created successfully", ToastLevel.Success);
            }
            catch(Exception ex)
            {
                toastService.ShowToast(ex.Message, ToastLevel.Error);
            }
        }
        else
        {
            try
            {
                await OrderClientService.UpdateOrder(order);
                toastService.ShowToast("Order updated sccessfully", ToastLevel.Info);
            }
            catch (Exception ex)
            {
                toastService.ShowToast(ex.Message, ToastLevel.Error);
            }
        }
        IsLoading = false;
    }

    private void AddWindow()
    {
        order.Windows.Add(new WindowDTO { SubElements = new List<SubElementDTO>() });
    }

    private WindowDTO windowToRemove;
    private SubElementDTO subElementToRemove;

    private void RemoveWindow(WindowDTO window)
    {
        windowToRemove = window;
        showConfirmationDialog = true;
        dataEnumType = DataEnumType.Window;
    }

    private async void ConfirmDelete(DataEnumType dataEnum)
    {
        if(dataEnum == DataEnumType.Window)
        {
            if (windowToRemove != null)
            {
                if (windowToRemove.Id > 0)
                {
                    await OrderClientService.DeleteWindow(windowToRemove.Id);
                }
                order.Windows.Remove(windowToRemove);
                windowToRemove = null;
                showConfirmationDialog = false;
            }
        }
        else if(dataEnum == DataEnumType.Subelement)
        {
            if (subElementToRemove != null)
            {
                if (subElementToRemove.Id > 0)
                {
                    await OrderClientService.DeleteSubElement(subElementToRemove.Id);

                    var window = order.Windows.FirstOrDefault(w => w.Id == SubElementWindowId);
                    if (window != null)
                    {
                        window.SubElements.Remove(subElementToRemove);
                    }
                }
                else
                {
                    order.Windows.ElementAt(0).SubElements.Remove(subElementToRemove);
                }

                subElementToRemove = null;
                showConfirmationDialog = false;
            }
        }

        else if (dataEnum == DataEnumType.Order)
        {
            if(Id != null)
            {
                await  OrderClientService.DeleteOrder((int)Id);
            }
        }

        toastService.ShowToast(dataEnum.ToString() +" Deleted", ToastLevel.Warning);
    }

    private void CancelDelete()
    {
        showConfirmationDialog = false;
    }


    private void AddSubElement(WindowDTO window)
    {
        window.SubElements.Add(new SubElementDTO());
    }

    private void RemoveSubElement(int windowId, SubElementDTO subElement)
    {
        SubElementWindowId = windowId;
        subElementToRemove = subElement;
        showConfirmationDialog = true;
        dataEnumType = DataEnumType.Subelement;
    }

    async Task Close()
    {
        IsLoading = true;
        await OrderClientService.GoOrderIndex("orderindex");
        IsLoading = false;
    }
}
